/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.xperi.schema.accumulator;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AccumulatorEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8754767495448547439L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AccumulatorEvent\",\"namespace\":\"com.xperi.schema.accumulator\",\"fields\":[{\"name\":\"assetId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"assetVersionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"elasticMetadataId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"subJobId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AccumulatorEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AccumulatorEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AccumulatorEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AccumulatorEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AccumulatorEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AccumulatorEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AccumulatorEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AccumulatorEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AccumulatorEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String assetId;
  private java.lang.String assetVersionId;
  private java.lang.String elasticMetadataId;
  private java.lang.String subJobId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AccumulatorEvent() {}

  /**
   * All-args constructor.
   * @param assetId The new value for assetId
   * @param assetVersionId The new value for assetVersionId
   * @param elasticMetadataId The new value for elasticMetadataId
   * @param subJobId The new value for subJobId
   */
  public AccumulatorEvent(java.lang.String assetId, java.lang.String assetVersionId, java.lang.String elasticMetadataId, java.lang.String subJobId) {
    this.assetId = assetId;
    this.assetVersionId = assetVersionId;
    this.elasticMetadataId = elasticMetadataId;
    this.subJobId = subJobId;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return assetId;
    case 1: return assetVersionId;
    case 2: return elasticMetadataId;
    case 3: return subJobId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: assetId = value$ != null ? value$.toString() : null; break;
    case 1: assetVersionId = value$ != null ? value$.toString() : null; break;
    case 2: elasticMetadataId = value$ != null ? value$.toString() : null; break;
    case 3: subJobId = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'assetId' field.
   * @return The value of the 'assetId' field.
   */
  public java.lang.String getAssetId() {
    return assetId;
  }


  /**
   * Sets the value of the 'assetId' field.
   * @param value the value to set.
   */
  public void setAssetId(java.lang.String value) {
    this.assetId = value;
  }

  /**
   * Gets the value of the 'assetVersionId' field.
   * @return The value of the 'assetVersionId' field.
   */
  public java.lang.String getAssetVersionId() {
    return assetVersionId;
  }


  /**
   * Sets the value of the 'assetVersionId' field.
   * @param value the value to set.
   */
  public void setAssetVersionId(java.lang.String value) {
    this.assetVersionId = value;
  }

  /**
   * Gets the value of the 'elasticMetadataId' field.
   * @return The value of the 'elasticMetadataId' field.
   */
  public java.lang.String getElasticMetadataId() {
    return elasticMetadataId;
  }


  /**
   * Sets the value of the 'elasticMetadataId' field.
   * @param value the value to set.
   */
  public void setElasticMetadataId(java.lang.String value) {
    this.elasticMetadataId = value;
  }

  /**
   * Gets the value of the 'subJobId' field.
   * @return The value of the 'subJobId' field.
   */
  public java.lang.String getSubJobId() {
    return subJobId;
  }


  /**
   * Sets the value of the 'subJobId' field.
   * @param value the value to set.
   */
  public void setSubJobId(java.lang.String value) {
    this.subJobId = value;
  }

  /**
   * Creates a new AccumulatorEvent RecordBuilder.
   * @return A new AccumulatorEvent RecordBuilder
   */
  public static com.xperi.schema.accumulator.AccumulatorEvent.Builder newBuilder() {
    return new com.xperi.schema.accumulator.AccumulatorEvent.Builder();
  }

  /**
   * Creates a new AccumulatorEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AccumulatorEvent RecordBuilder
   */
  public static com.xperi.schema.accumulator.AccumulatorEvent.Builder newBuilder(com.xperi.schema.accumulator.AccumulatorEvent.Builder other) {
    if (other == null) {
      return new com.xperi.schema.accumulator.AccumulatorEvent.Builder();
    } else {
      return new com.xperi.schema.accumulator.AccumulatorEvent.Builder(other);
    }
  }

  /**
   * Creates a new AccumulatorEvent RecordBuilder by copying an existing AccumulatorEvent instance.
   * @param other The existing instance to copy.
   * @return A new AccumulatorEvent RecordBuilder
   */
  public static com.xperi.schema.accumulator.AccumulatorEvent.Builder newBuilder(com.xperi.schema.accumulator.AccumulatorEvent other) {
    if (other == null) {
      return new com.xperi.schema.accumulator.AccumulatorEvent.Builder();
    } else {
      return new com.xperi.schema.accumulator.AccumulatorEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for AccumulatorEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AccumulatorEvent>
    implements org.apache.avro.data.RecordBuilder<AccumulatorEvent> {

    private java.lang.String assetId;
    private java.lang.String assetVersionId;
    private java.lang.String elasticMetadataId;
    private java.lang.String subJobId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.xperi.schema.accumulator.AccumulatorEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.assetId)) {
        this.assetId = data().deepCopy(fields()[0].schema(), other.assetId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.assetVersionId)) {
        this.assetVersionId = data().deepCopy(fields()[1].schema(), other.assetVersionId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.elasticMetadataId)) {
        this.elasticMetadataId = data().deepCopy(fields()[2].schema(), other.elasticMetadataId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.subJobId)) {
        this.subJobId = data().deepCopy(fields()[3].schema(), other.subJobId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing AccumulatorEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.xperi.schema.accumulator.AccumulatorEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.assetId)) {
        this.assetId = data().deepCopy(fields()[0].schema(), other.assetId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.assetVersionId)) {
        this.assetVersionId = data().deepCopy(fields()[1].schema(), other.assetVersionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.elasticMetadataId)) {
        this.elasticMetadataId = data().deepCopy(fields()[2].schema(), other.elasticMetadataId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.subJobId)) {
        this.subJobId = data().deepCopy(fields()[3].schema(), other.subJobId);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'assetId' field.
      * @return The value.
      */
    public java.lang.String getAssetId() {
      return assetId;
    }


    /**
      * Sets the value of the 'assetId' field.
      * @param value The value of 'assetId'.
      * @return This builder.
      */
    public com.xperi.schema.accumulator.AccumulatorEvent.Builder setAssetId(java.lang.String value) {
      validate(fields()[0], value);
      this.assetId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'assetId' field has been set.
      * @return True if the 'assetId' field has been set, false otherwise.
      */
    public boolean hasAssetId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'assetId' field.
      * @return This builder.
      */
    public com.xperi.schema.accumulator.AccumulatorEvent.Builder clearAssetId() {
      assetId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'assetVersionId' field.
      * @return The value.
      */
    public java.lang.String getAssetVersionId() {
      return assetVersionId;
    }


    /**
      * Sets the value of the 'assetVersionId' field.
      * @param value The value of 'assetVersionId'.
      * @return This builder.
      */
    public com.xperi.schema.accumulator.AccumulatorEvent.Builder setAssetVersionId(java.lang.String value) {
      validate(fields()[1], value);
      this.assetVersionId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'assetVersionId' field has been set.
      * @return True if the 'assetVersionId' field has been set, false otherwise.
      */
    public boolean hasAssetVersionId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'assetVersionId' field.
      * @return This builder.
      */
    public com.xperi.schema.accumulator.AccumulatorEvent.Builder clearAssetVersionId() {
      assetVersionId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'elasticMetadataId' field.
      * @return The value.
      */
    public java.lang.String getElasticMetadataId() {
      return elasticMetadataId;
    }


    /**
      * Sets the value of the 'elasticMetadataId' field.
      * @param value The value of 'elasticMetadataId'.
      * @return This builder.
      */
    public com.xperi.schema.accumulator.AccumulatorEvent.Builder setElasticMetadataId(java.lang.String value) {
      validate(fields()[2], value);
      this.elasticMetadataId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'elasticMetadataId' field has been set.
      * @return True if the 'elasticMetadataId' field has been set, false otherwise.
      */
    public boolean hasElasticMetadataId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'elasticMetadataId' field.
      * @return This builder.
      */
    public com.xperi.schema.accumulator.AccumulatorEvent.Builder clearElasticMetadataId() {
      elasticMetadataId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'subJobId' field.
      * @return The value.
      */
    public java.lang.String getSubJobId() {
      return subJobId;
    }


    /**
      * Sets the value of the 'subJobId' field.
      * @param value The value of 'subJobId'.
      * @return This builder.
      */
    public com.xperi.schema.accumulator.AccumulatorEvent.Builder setSubJobId(java.lang.String value) {
      validate(fields()[3], value);
      this.subJobId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'subJobId' field has been set.
      * @return True if the 'subJobId' field has been set, false otherwise.
      */
    public boolean hasSubJobId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'subJobId' field.
      * @return This builder.
      */
    public com.xperi.schema.accumulator.AccumulatorEvent.Builder clearSubJobId() {
      subJobId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AccumulatorEvent build() {
      try {
        AccumulatorEvent record = new AccumulatorEvent();
        record.assetId = fieldSetFlags()[0] ? this.assetId : (java.lang.String) defaultValue(fields()[0]);
        record.assetVersionId = fieldSetFlags()[1] ? this.assetVersionId : (java.lang.String) defaultValue(fields()[1]);
        record.elasticMetadataId = fieldSetFlags()[2] ? this.elasticMetadataId : (java.lang.String) defaultValue(fields()[2]);
        record.subJobId = fieldSetFlags()[3] ? this.subJobId : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AccumulatorEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<AccumulatorEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AccumulatorEvent>
    READER$ = (org.apache.avro.io.DatumReader<AccumulatorEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.assetId);

    out.writeString(this.assetVersionId);

    out.writeString(this.elasticMetadataId);

    out.writeString(this.subJobId);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.assetId = in.readString();

      this.assetVersionId = in.readString();

      this.elasticMetadataId = in.readString();

      this.subJobId = in.readString();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.assetId = in.readString();
          break;

        case 1:
          this.assetVersionId = in.readString();
          break;

        case 2:
          this.elasticMetadataId = in.readString();
          break;

        case 3:
          this.subJobId = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










