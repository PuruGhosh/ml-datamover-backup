/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.xperi.schema.metadata;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Store extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3877260761030995071L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Store\",\"namespace\":\"com.xperi.schema.metadata\",\"fields\":[{\"name\":\"size\",\"type\":\"long\"},{\"name\":\"contentType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"userMetadata\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}},{\"name\":\"versionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"key\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"eTag\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"sequencer\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Store> ENCODER =
      new BinaryMessageEncoder<Store>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Store> DECODER =
      new BinaryMessageDecoder<Store>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Store> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Store> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Store> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Store>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Store to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Store from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Store instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Store fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long size;
  private java.lang.String contentType;
  private java.util.Map<java.lang.String,java.lang.String> userMetadata;
  private java.lang.String versionId;
  private java.lang.String key;
  private java.lang.String eTag;
  private java.lang.String sequencer;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Store() {}

  /**
   * All-args constructor.
   * @param size The new value for size
   * @param contentType The new value for contentType
   * @param userMetadata The new value for userMetadata
   * @param versionId The new value for versionId
   * @param key The new value for key
   * @param eTag The new value for eTag
   * @param sequencer The new value for sequencer
   */
  public Store(java.lang.Long size, java.lang.String contentType, java.util.Map<java.lang.String,java.lang.String> userMetadata, java.lang.String versionId, java.lang.String key, java.lang.String eTag, java.lang.String sequencer) {
    this.size = size;
    this.contentType = contentType;
    this.userMetadata = userMetadata;
    this.versionId = versionId;
    this.key = key;
    this.eTag = eTag;
    this.sequencer = sequencer;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return size;
    case 1: return contentType;
    case 2: return userMetadata;
    case 3: return versionId;
    case 4: return key;
    case 5: return eTag;
    case 6: return sequencer;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: size = (java.lang.Long)value$; break;
    case 1: contentType = value$ != null ? value$.toString() : null; break;
    case 2: userMetadata = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 3: versionId = value$ != null ? value$.toString() : null; break;
    case 4: key = value$ != null ? value$.toString() : null; break;
    case 5: eTag = value$ != null ? value$.toString() : null; break;
    case 6: sequencer = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'size' field.
   * @return The value of the 'size' field.
   */
  public long getSize() {
    return size;
  }


  /**
   * Sets the value of the 'size' field.
   * @param value the value to set.
   */
  public void setSize(long value) {
    this.size = value;
  }

  /**
   * Gets the value of the 'contentType' field.
   * @return The value of the 'contentType' field.
   */
  public java.lang.String getContentType() {
    return contentType;
  }


  /**
   * Sets the value of the 'contentType' field.
   * @param value the value to set.
   */
  public void setContentType(java.lang.String value) {
    this.contentType = value;
  }

  /**
   * Gets the value of the 'userMetadata' field.
   * @return The value of the 'userMetadata' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getUserMetadata() {
    return userMetadata;
  }


  /**
   * Sets the value of the 'userMetadata' field.
   * @param value the value to set.
   */
  public void setUserMetadata(java.util.Map<java.lang.String,java.lang.String> value) {
    this.userMetadata = value;
  }

  /**
   * Gets the value of the 'versionId' field.
   * @return The value of the 'versionId' field.
   */
  public java.lang.String getVersionId() {
    return versionId;
  }


  /**
   * Sets the value of the 'versionId' field.
   * @param value the value to set.
   */
  public void setVersionId(java.lang.String value) {
    this.versionId = value;
  }

  /**
   * Gets the value of the 'key' field.
   * @return The value of the 'key' field.
   */
  public java.lang.String getKey() {
    return key;
  }


  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(java.lang.String value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'eTag' field.
   * @return The value of the 'eTag' field.
   */
  public java.lang.String getETag() {
    return eTag;
  }


  /**
   * Sets the value of the 'eTag' field.
   * @param value the value to set.
   */
  public void setETag(java.lang.String value) {
    this.eTag = value;
  }

  /**
   * Gets the value of the 'sequencer' field.
   * @return The value of the 'sequencer' field.
   */
  public java.lang.String getSequencer() {
    return sequencer;
  }


  /**
   * Sets the value of the 'sequencer' field.
   * @param value the value to set.
   */
  public void setSequencer(java.lang.String value) {
    this.sequencer = value;
  }

  /**
   * Creates a new Store RecordBuilder.
   * @return A new Store RecordBuilder
   */
  public static com.xperi.schema.metadata.Store.Builder newBuilder() {
    return new com.xperi.schema.metadata.Store.Builder();
  }

  /**
   * Creates a new Store RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Store RecordBuilder
   */
  public static com.xperi.schema.metadata.Store.Builder newBuilder(com.xperi.schema.metadata.Store.Builder other) {
    if (other == null) {
      return new com.xperi.schema.metadata.Store.Builder();
    } else {
      return new com.xperi.schema.metadata.Store.Builder(other);
    }
  }

  /**
   * Creates a new Store RecordBuilder by copying an existing Store instance.
   * @param other The existing instance to copy.
   * @return A new Store RecordBuilder
   */
  public static com.xperi.schema.metadata.Store.Builder newBuilder(com.xperi.schema.metadata.Store other) {
    if (other == null) {
      return new com.xperi.schema.metadata.Store.Builder();
    } else {
      return new com.xperi.schema.metadata.Store.Builder(other);
    }
  }

  /**
   * RecordBuilder for Store instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Store>
    implements org.apache.avro.data.RecordBuilder<Store> {

    private long size;
    private java.lang.String contentType;
    private java.util.Map<java.lang.String,java.lang.String> userMetadata;
    private java.lang.String versionId;
    private java.lang.String key;
    private java.lang.String eTag;
    private java.lang.String sequencer;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.xperi.schema.metadata.Store.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.size)) {
        this.size = data().deepCopy(fields()[0].schema(), other.size);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.contentType)) {
        this.contentType = data().deepCopy(fields()[1].schema(), other.contentType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.userMetadata)) {
        this.userMetadata = data().deepCopy(fields()[2].schema(), other.userMetadata);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.versionId)) {
        this.versionId = data().deepCopy(fields()[3].schema(), other.versionId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.key)) {
        this.key = data().deepCopy(fields()[4].schema(), other.key);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.eTag)) {
        this.eTag = data().deepCopy(fields()[5].schema(), other.eTag);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.sequencer)) {
        this.sequencer = data().deepCopy(fields()[6].schema(), other.sequencer);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing Store instance
     * @param other The existing instance to copy.
     */
    private Builder(com.xperi.schema.metadata.Store other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.size)) {
        this.size = data().deepCopy(fields()[0].schema(), other.size);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.contentType)) {
        this.contentType = data().deepCopy(fields()[1].schema(), other.contentType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userMetadata)) {
        this.userMetadata = data().deepCopy(fields()[2].schema(), other.userMetadata);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.versionId)) {
        this.versionId = data().deepCopy(fields()[3].schema(), other.versionId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.key)) {
        this.key = data().deepCopy(fields()[4].schema(), other.key);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.eTag)) {
        this.eTag = data().deepCopy(fields()[5].schema(), other.eTag);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sequencer)) {
        this.sequencer = data().deepCopy(fields()[6].schema(), other.sequencer);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'size' field.
      * @return The value.
      */
    public long getSize() {
      return size;
    }


    /**
      * Sets the value of the 'size' field.
      * @param value The value of 'size'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.Store.Builder setSize(long value) {
      validate(fields()[0], value);
      this.size = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'size' field has been set.
      * @return True if the 'size' field has been set, false otherwise.
      */
    public boolean hasSize() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'size' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.Store.Builder clearSize() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'contentType' field.
      * @return The value.
      */
    public java.lang.String getContentType() {
      return contentType;
    }


    /**
      * Sets the value of the 'contentType' field.
      * @param value The value of 'contentType'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.Store.Builder setContentType(java.lang.String value) {
      validate(fields()[1], value);
      this.contentType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'contentType' field has been set.
      * @return True if the 'contentType' field has been set, false otherwise.
      */
    public boolean hasContentType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'contentType' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.Store.Builder clearContentType() {
      contentType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userMetadata' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getUserMetadata() {
      return userMetadata;
    }


    /**
      * Sets the value of the 'userMetadata' field.
      * @param value The value of 'userMetadata'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.Store.Builder setUserMetadata(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[2], value);
      this.userMetadata = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userMetadata' field has been set.
      * @return True if the 'userMetadata' field has been set, false otherwise.
      */
    public boolean hasUserMetadata() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userMetadata' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.Store.Builder clearUserMetadata() {
      userMetadata = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'versionId' field.
      * @return The value.
      */
    public java.lang.String getVersionId() {
      return versionId;
    }


    /**
      * Sets the value of the 'versionId' field.
      * @param value The value of 'versionId'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.Store.Builder setVersionId(java.lang.String value) {
      validate(fields()[3], value);
      this.versionId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'versionId' field has been set.
      * @return True if the 'versionId' field has been set, false otherwise.
      */
    public boolean hasVersionId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'versionId' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.Store.Builder clearVersionId() {
      versionId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'key' field.
      * @return The value.
      */
    public java.lang.String getKey() {
      return key;
    }


    /**
      * Sets the value of the 'key' field.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.Store.Builder setKey(java.lang.String value) {
      validate(fields()[4], value);
      this.key = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'key' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.Store.Builder clearKey() {
      key = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'eTag' field.
      * @return The value.
      */
    public java.lang.String getETag() {
      return eTag;
    }


    /**
      * Sets the value of the 'eTag' field.
      * @param value The value of 'eTag'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.Store.Builder setETag(java.lang.String value) {
      validate(fields()[5], value);
      this.eTag = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'eTag' field has been set.
      * @return True if the 'eTag' field has been set, false otherwise.
      */
    public boolean hasETag() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'eTag' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.Store.Builder clearETag() {
      eTag = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'sequencer' field.
      * @return The value.
      */
    public java.lang.String getSequencer() {
      return sequencer;
    }


    /**
      * Sets the value of the 'sequencer' field.
      * @param value The value of 'sequencer'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.Store.Builder setSequencer(java.lang.String value) {
      validate(fields()[6], value);
      this.sequencer = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'sequencer' field has been set.
      * @return True if the 'sequencer' field has been set, false otherwise.
      */
    public boolean hasSequencer() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'sequencer' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.Store.Builder clearSequencer() {
      sequencer = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Store build() {
      try {
        Store record = new Store();
        record.size = fieldSetFlags()[0] ? this.size : (java.lang.Long) defaultValue(fields()[0]);
        record.contentType = fieldSetFlags()[1] ? this.contentType : (java.lang.String) defaultValue(fields()[1]);
        record.userMetadata = fieldSetFlags()[2] ? this.userMetadata : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[2]);
        record.versionId = fieldSetFlags()[3] ? this.versionId : (java.lang.String) defaultValue(fields()[3]);
        record.key = fieldSetFlags()[4] ? this.key : (java.lang.String) defaultValue(fields()[4]);
        record.eTag = fieldSetFlags()[5] ? this.eTag : (java.lang.String) defaultValue(fields()[5]);
        record.sequencer = fieldSetFlags()[6] ? this.sequencer : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Store>
    WRITER$ = (org.apache.avro.io.DatumWriter<Store>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Store>
    READER$ = (org.apache.avro.io.DatumReader<Store>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.size);

    out.writeString(this.contentType);

    long size0 = this.userMetadata.size();
    out.writeMapStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.Map.Entry<java.lang.String, java.lang.String> e0: this.userMetadata.entrySet()) {
      actualSize0++;
      out.startItem();
      out.writeString(e0.getKey());
      java.lang.String v0 = e0.getValue();
      out.writeString(v0);
    }
    out.writeMapEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeString(this.versionId);

    out.writeString(this.key);

    out.writeString(this.eTag);

    out.writeString(this.sequencer);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.size = in.readLong();

      this.contentType = in.readString();

      long size0 = in.readMapStart();
      java.util.Map<java.lang.String,java.lang.String> m0 = this.userMetadata; // Need fresh name due to limitation of macro system
      if (m0 == null) {
        m0 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size0);
        this.userMetadata = m0;
      } else m0.clear();
      for ( ; 0 < size0; size0 = in.mapNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String k0 = null;
          k0 = in.readString();
          java.lang.String v0 = null;
          v0 = in.readString();
          m0.put(k0, v0);
        }
      }

      this.versionId = in.readString();

      this.key = in.readString();

      this.eTag = in.readString();

      this.sequencer = in.readString();

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.size = in.readLong();
          break;

        case 1:
          this.contentType = in.readString();
          break;

        case 2:
          long size0 = in.readMapStart();
          java.util.Map<java.lang.String,java.lang.String> m0 = this.userMetadata; // Need fresh name due to limitation of macro system
          if (m0 == null) {
            m0 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size0);
            this.userMetadata = m0;
          } else m0.clear();
          for ( ; 0 < size0; size0 = in.mapNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String k0 = null;
              k0 = in.readString();
              java.lang.String v0 = null;
              v0 = in.readString();
              m0.put(k0, v0);
            }
          }
          break;

        case 3:
          this.versionId = in.readString();
          break;

        case 4:
          this.key = in.readString();
          break;

        case 5:
          this.eTag = in.readString();
          break;

        case 6:
          this.sequencer = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










