/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.xperi.schema.metadata;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class AssetMetadata extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1905936845625044230L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AssetMetadata\",\"namespace\":\"com.xperi.schema.metadata\",\"fields\":[{\"name\":\"asset_uuid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"subJobId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"operation\",\"type\":{\"type\":\"enum\",\"name\":\"Operations\",\"symbols\":[\"CREATE\",\"UPDATE\",\"DELETE\"]}},{\"name\":\"meta_file_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"parameters\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"uiPartMetadata\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}},{\"name\":\"contentAssetMetadata\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"filePartMetadata\",\"type\":{\"type\":\"record\",\"name\":\"File\",\"fields\":[{\"name\":\"file_name\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"meta_file_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"owner\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"metadata_type\",\"type\":{\"type\":\"enum\",\"name\":\"MetadataType\",\"symbols\":[\"XML\",\"CSV\",\"JSON\",\"TEXT\",\"UNKNOWN\"]},\"default\":\"UNKNOWN\"}]}},{\"name\":\"storePartMetadata\",\"type\":{\"type\":\"record\",\"name\":\"Store\",\"fields\":[{\"name\":\"size\",\"type\":\"long\"},{\"name\":\"contentType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"userMetadata\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}},{\"name\":\"versionId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"key\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"eTag\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"sequencer\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"}]}},{\"name\":\"userRoles\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AssetMetadata> ENCODER =
      new BinaryMessageEncoder<AssetMetadata>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AssetMetadata> DECODER =
      new BinaryMessageDecoder<AssetMetadata>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AssetMetadata> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AssetMetadata> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AssetMetadata> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AssetMetadata>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AssetMetadata to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AssetMetadata from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AssetMetadata instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AssetMetadata fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String asset_uuid;
  private java.lang.String subJobId;
  private com.xperi.schema.metadata.Operations operation;
  private java.lang.String meta_file_name;
  private java.lang.String parameters;
  private java.util.Map<java.lang.String,java.lang.String> uiPartMetadata;
  private java.lang.String contentAssetMetadata;
  private com.xperi.schema.metadata.File filePartMetadata;
  private com.xperi.schema.metadata.Store storePartMetadata;
  private java.util.List<java.lang.String> userRoles;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AssetMetadata() {}

  /**
   * All-args constructor.
   * @param asset_uuid The new value for asset_uuid
   * @param subJobId The new value for subJobId
   * @param operation The new value for operation
   * @param meta_file_name The new value for meta_file_name
   * @param parameters The new value for parameters
   * @param uiPartMetadata The new value for uiPartMetadata
   * @param contentAssetMetadata The new value for contentAssetMetadata
   * @param filePartMetadata The new value for filePartMetadata
   * @param storePartMetadata The new value for storePartMetadata
   * @param userRoles The new value for userRoles
   */
  public AssetMetadata(java.lang.String asset_uuid, java.lang.String subJobId, com.xperi.schema.metadata.Operations operation, java.lang.String meta_file_name, java.lang.String parameters, java.util.Map<java.lang.String,java.lang.String> uiPartMetadata, java.lang.String contentAssetMetadata, com.xperi.schema.metadata.File filePartMetadata, com.xperi.schema.metadata.Store storePartMetadata, java.util.List<java.lang.String> userRoles) {
    this.asset_uuid = asset_uuid;
    this.subJobId = subJobId;
    this.operation = operation;
    this.meta_file_name = meta_file_name;
    this.parameters = parameters;
    this.uiPartMetadata = uiPartMetadata;
    this.contentAssetMetadata = contentAssetMetadata;
    this.filePartMetadata = filePartMetadata;
    this.storePartMetadata = storePartMetadata;
    this.userRoles = userRoles;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return asset_uuid;
    case 1: return subJobId;
    case 2: return operation;
    case 3: return meta_file_name;
    case 4: return parameters;
    case 5: return uiPartMetadata;
    case 6: return contentAssetMetadata;
    case 7: return filePartMetadata;
    case 8: return storePartMetadata;
    case 9: return userRoles;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: asset_uuid = value$ != null ? value$.toString() : null; break;
    case 1: subJobId = value$ != null ? value$.toString() : null; break;
    case 2: operation = (com.xperi.schema.metadata.Operations)value$; break;
    case 3: meta_file_name = value$ != null ? value$.toString() : null; break;
    case 4: parameters = value$ != null ? value$.toString() : null; break;
    case 5: uiPartMetadata = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    case 6: contentAssetMetadata = value$ != null ? value$.toString() : null; break;
    case 7: filePartMetadata = (com.xperi.schema.metadata.File)value$; break;
    case 8: storePartMetadata = (com.xperi.schema.metadata.Store)value$; break;
    case 9: userRoles = (java.util.List<java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'asset_uuid' field.
   * @return The value of the 'asset_uuid' field.
   */
  public java.lang.String getAssetUuid() {
    return asset_uuid;
  }


  /**
   * Sets the value of the 'asset_uuid' field.
   * @param value the value to set.
   */
  public void setAssetUuid(java.lang.String value) {
    this.asset_uuid = value;
  }

  /**
   * Gets the value of the 'subJobId' field.
   * @return The value of the 'subJobId' field.
   */
  public java.lang.String getSubJobId() {
    return subJobId;
  }


  /**
   * Sets the value of the 'subJobId' field.
   * @param value the value to set.
   */
  public void setSubJobId(java.lang.String value) {
    this.subJobId = value;
  }

  /**
   * Gets the value of the 'operation' field.
   * @return The value of the 'operation' field.
   */
  public com.xperi.schema.metadata.Operations getOperation() {
    return operation;
  }


  /**
   * Sets the value of the 'operation' field.
   * @param value the value to set.
   */
  public void setOperation(com.xperi.schema.metadata.Operations value) {
    this.operation = value;
  }

  /**
   * Gets the value of the 'meta_file_name' field.
   * @return The value of the 'meta_file_name' field.
   */
  public java.lang.String getMetaFileName() {
    return meta_file_name;
  }


  /**
   * Sets the value of the 'meta_file_name' field.
   * @param value the value to set.
   */
  public void setMetaFileName(java.lang.String value) {
    this.meta_file_name = value;
  }

  /**
   * Gets the value of the 'parameters' field.
   * @return The value of the 'parameters' field.
   */
  public java.lang.String getParameters() {
    return parameters;
  }


  /**
   * Sets the value of the 'parameters' field.
   * @param value the value to set.
   */
  public void setParameters(java.lang.String value) {
    this.parameters = value;
  }

  /**
   * Gets the value of the 'uiPartMetadata' field.
   * @return The value of the 'uiPartMetadata' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getUiPartMetadata() {
    return uiPartMetadata;
  }


  /**
   * Sets the value of the 'uiPartMetadata' field.
   * @param value the value to set.
   */
  public void setUiPartMetadata(java.util.Map<java.lang.String,java.lang.String> value) {
    this.uiPartMetadata = value;
  }

  /**
   * Gets the value of the 'contentAssetMetadata' field.
   * @return The value of the 'contentAssetMetadata' field.
   */
  public java.lang.String getContentAssetMetadata() {
    return contentAssetMetadata;
  }


  /**
   * Sets the value of the 'contentAssetMetadata' field.
   * @param value the value to set.
   */
  public void setContentAssetMetadata(java.lang.String value) {
    this.contentAssetMetadata = value;
  }

  /**
   * Gets the value of the 'filePartMetadata' field.
   * @return The value of the 'filePartMetadata' field.
   */
  public com.xperi.schema.metadata.File getFilePartMetadata() {
    return filePartMetadata;
  }


  /**
   * Sets the value of the 'filePartMetadata' field.
   * @param value the value to set.
   */
  public void setFilePartMetadata(com.xperi.schema.metadata.File value) {
    this.filePartMetadata = value;
  }

  /**
   * Gets the value of the 'storePartMetadata' field.
   * @return The value of the 'storePartMetadata' field.
   */
  public com.xperi.schema.metadata.Store getStorePartMetadata() {
    return storePartMetadata;
  }


  /**
   * Sets the value of the 'storePartMetadata' field.
   * @param value the value to set.
   */
  public void setStorePartMetadata(com.xperi.schema.metadata.Store value) {
    this.storePartMetadata = value;
  }

  /**
   * Gets the value of the 'userRoles' field.
   * @return The value of the 'userRoles' field.
   */
  public java.util.List<java.lang.String> getUserRoles() {
    return userRoles;
  }


  /**
   * Sets the value of the 'userRoles' field.
   * @param value the value to set.
   */
  public void setUserRoles(java.util.List<java.lang.String> value) {
    this.userRoles = value;
  }

  /**
   * Creates a new AssetMetadata RecordBuilder.
   * @return A new AssetMetadata RecordBuilder
   */
  public static com.xperi.schema.metadata.AssetMetadata.Builder newBuilder() {
    return new com.xperi.schema.metadata.AssetMetadata.Builder();
  }

  /**
   * Creates a new AssetMetadata RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AssetMetadata RecordBuilder
   */
  public static com.xperi.schema.metadata.AssetMetadata.Builder newBuilder(com.xperi.schema.metadata.AssetMetadata.Builder other) {
    if (other == null) {
      return new com.xperi.schema.metadata.AssetMetadata.Builder();
    } else {
      return new com.xperi.schema.metadata.AssetMetadata.Builder(other);
    }
  }

  /**
   * Creates a new AssetMetadata RecordBuilder by copying an existing AssetMetadata instance.
   * @param other The existing instance to copy.
   * @return A new AssetMetadata RecordBuilder
   */
  public static com.xperi.schema.metadata.AssetMetadata.Builder newBuilder(com.xperi.schema.metadata.AssetMetadata other) {
    if (other == null) {
      return new com.xperi.schema.metadata.AssetMetadata.Builder();
    } else {
      return new com.xperi.schema.metadata.AssetMetadata.Builder(other);
    }
  }

  /**
   * RecordBuilder for AssetMetadata instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AssetMetadata>
    implements org.apache.avro.data.RecordBuilder<AssetMetadata> {

    private java.lang.String asset_uuid;
    private java.lang.String subJobId;
    private com.xperi.schema.metadata.Operations operation;
    private java.lang.String meta_file_name;
    private java.lang.String parameters;
    private java.util.Map<java.lang.String,java.lang.String> uiPartMetadata;
    private java.lang.String contentAssetMetadata;
    private com.xperi.schema.metadata.File filePartMetadata;
    private com.xperi.schema.metadata.File.Builder filePartMetadataBuilder;
    private com.xperi.schema.metadata.Store storePartMetadata;
    private com.xperi.schema.metadata.Store.Builder storePartMetadataBuilder;
    private java.util.List<java.lang.String> userRoles;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.xperi.schema.metadata.AssetMetadata.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.asset_uuid)) {
        this.asset_uuid = data().deepCopy(fields()[0].schema(), other.asset_uuid);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.subJobId)) {
        this.subJobId = data().deepCopy(fields()[1].schema(), other.subJobId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.operation)) {
        this.operation = data().deepCopy(fields()[2].schema(), other.operation);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.meta_file_name)) {
        this.meta_file_name = data().deepCopy(fields()[3].schema(), other.meta_file_name);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.parameters)) {
        this.parameters = data().deepCopy(fields()[4].schema(), other.parameters);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.uiPartMetadata)) {
        this.uiPartMetadata = data().deepCopy(fields()[5].schema(), other.uiPartMetadata);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.contentAssetMetadata)) {
        this.contentAssetMetadata = data().deepCopy(fields()[6].schema(), other.contentAssetMetadata);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.filePartMetadata)) {
        this.filePartMetadata = data().deepCopy(fields()[7].schema(), other.filePartMetadata);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (other.hasFilePartMetadataBuilder()) {
        this.filePartMetadataBuilder = com.xperi.schema.metadata.File.newBuilder(other.getFilePartMetadataBuilder());
      }
      if (isValidValue(fields()[8], other.storePartMetadata)) {
        this.storePartMetadata = data().deepCopy(fields()[8].schema(), other.storePartMetadata);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (other.hasStorePartMetadataBuilder()) {
        this.storePartMetadataBuilder = com.xperi.schema.metadata.Store.newBuilder(other.getStorePartMetadataBuilder());
      }
      if (isValidValue(fields()[9], other.userRoles)) {
        this.userRoles = data().deepCopy(fields()[9].schema(), other.userRoles);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing AssetMetadata instance
     * @param other The existing instance to copy.
     */
    private Builder(com.xperi.schema.metadata.AssetMetadata other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.asset_uuid)) {
        this.asset_uuid = data().deepCopy(fields()[0].schema(), other.asset_uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subJobId)) {
        this.subJobId = data().deepCopy(fields()[1].schema(), other.subJobId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.operation)) {
        this.operation = data().deepCopy(fields()[2].schema(), other.operation);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.meta_file_name)) {
        this.meta_file_name = data().deepCopy(fields()[3].schema(), other.meta_file_name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.parameters)) {
        this.parameters = data().deepCopy(fields()[4].schema(), other.parameters);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.uiPartMetadata)) {
        this.uiPartMetadata = data().deepCopy(fields()[5].schema(), other.uiPartMetadata);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.contentAssetMetadata)) {
        this.contentAssetMetadata = data().deepCopy(fields()[6].schema(), other.contentAssetMetadata);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.filePartMetadata)) {
        this.filePartMetadata = data().deepCopy(fields()[7].schema(), other.filePartMetadata);
        fieldSetFlags()[7] = true;
      }
      this.filePartMetadataBuilder = null;
      if (isValidValue(fields()[8], other.storePartMetadata)) {
        this.storePartMetadata = data().deepCopy(fields()[8].schema(), other.storePartMetadata);
        fieldSetFlags()[8] = true;
      }
      this.storePartMetadataBuilder = null;
      if (isValidValue(fields()[9], other.userRoles)) {
        this.userRoles = data().deepCopy(fields()[9].schema(), other.userRoles);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'asset_uuid' field.
      * @return The value.
      */
    public java.lang.String getAssetUuid() {
      return asset_uuid;
    }


    /**
      * Sets the value of the 'asset_uuid' field.
      * @param value The value of 'asset_uuid'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder setAssetUuid(java.lang.String value) {
      validate(fields()[0], value);
      this.asset_uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'asset_uuid' field has been set.
      * @return True if the 'asset_uuid' field has been set, false otherwise.
      */
    public boolean hasAssetUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'asset_uuid' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder clearAssetUuid() {
      asset_uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'subJobId' field.
      * @return The value.
      */
    public java.lang.String getSubJobId() {
      return subJobId;
    }


    /**
      * Sets the value of the 'subJobId' field.
      * @param value The value of 'subJobId'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder setSubJobId(java.lang.String value) {
      validate(fields()[1], value);
      this.subJobId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'subJobId' field has been set.
      * @return True if the 'subJobId' field has been set, false otherwise.
      */
    public boolean hasSubJobId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'subJobId' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder clearSubJobId() {
      subJobId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'operation' field.
      * @return The value.
      */
    public com.xperi.schema.metadata.Operations getOperation() {
      return operation;
    }


    /**
      * Sets the value of the 'operation' field.
      * @param value The value of 'operation'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder setOperation(com.xperi.schema.metadata.Operations value) {
      validate(fields()[2], value);
      this.operation = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'operation' field has been set.
      * @return True if the 'operation' field has been set, false otherwise.
      */
    public boolean hasOperation() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'operation' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder clearOperation() {
      operation = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'meta_file_name' field.
      * @return The value.
      */
    public java.lang.String getMetaFileName() {
      return meta_file_name;
    }


    /**
      * Sets the value of the 'meta_file_name' field.
      * @param value The value of 'meta_file_name'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder setMetaFileName(java.lang.String value) {
      validate(fields()[3], value);
      this.meta_file_name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'meta_file_name' field has been set.
      * @return True if the 'meta_file_name' field has been set, false otherwise.
      */
    public boolean hasMetaFileName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'meta_file_name' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder clearMetaFileName() {
      meta_file_name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'parameters' field.
      * @return The value.
      */
    public java.lang.String getParameters() {
      return parameters;
    }


    /**
      * Sets the value of the 'parameters' field.
      * @param value The value of 'parameters'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder setParameters(java.lang.String value) {
      validate(fields()[4], value);
      this.parameters = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'parameters' field has been set.
      * @return True if the 'parameters' field has been set, false otherwise.
      */
    public boolean hasParameters() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'parameters' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder clearParameters() {
      parameters = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'uiPartMetadata' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getUiPartMetadata() {
      return uiPartMetadata;
    }


    /**
      * Sets the value of the 'uiPartMetadata' field.
      * @param value The value of 'uiPartMetadata'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder setUiPartMetadata(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[5], value);
      this.uiPartMetadata = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'uiPartMetadata' field has been set.
      * @return True if the 'uiPartMetadata' field has been set, false otherwise.
      */
    public boolean hasUiPartMetadata() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'uiPartMetadata' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder clearUiPartMetadata() {
      uiPartMetadata = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'contentAssetMetadata' field.
      * @return The value.
      */
    public java.lang.String getContentAssetMetadata() {
      return contentAssetMetadata;
    }


    /**
      * Sets the value of the 'contentAssetMetadata' field.
      * @param value The value of 'contentAssetMetadata'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder setContentAssetMetadata(java.lang.String value) {
      validate(fields()[6], value);
      this.contentAssetMetadata = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'contentAssetMetadata' field has been set.
      * @return True if the 'contentAssetMetadata' field has been set, false otherwise.
      */
    public boolean hasContentAssetMetadata() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'contentAssetMetadata' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder clearContentAssetMetadata() {
      contentAssetMetadata = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'filePartMetadata' field.
      * @return The value.
      */
    public com.xperi.schema.metadata.File getFilePartMetadata() {
      return filePartMetadata;
    }


    /**
      * Sets the value of the 'filePartMetadata' field.
      * @param value The value of 'filePartMetadata'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder setFilePartMetadata(com.xperi.schema.metadata.File value) {
      validate(fields()[7], value);
      this.filePartMetadataBuilder = null;
      this.filePartMetadata = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'filePartMetadata' field has been set.
      * @return True if the 'filePartMetadata' field has been set, false otherwise.
      */
    public boolean hasFilePartMetadata() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'filePartMetadata' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.xperi.schema.metadata.File.Builder getFilePartMetadataBuilder() {
      if (filePartMetadataBuilder == null) {
        if (hasFilePartMetadata()) {
          setFilePartMetadataBuilder(com.xperi.schema.metadata.File.newBuilder(filePartMetadata));
        } else {
          setFilePartMetadataBuilder(com.xperi.schema.metadata.File.newBuilder());
        }
      }
      return filePartMetadataBuilder;
    }

    /**
     * Sets the Builder instance for the 'filePartMetadata' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.xperi.schema.metadata.AssetMetadata.Builder setFilePartMetadataBuilder(com.xperi.schema.metadata.File.Builder value) {
      clearFilePartMetadata();
      filePartMetadataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'filePartMetadata' field has an active Builder instance
     * @return True if the 'filePartMetadata' field has an active Builder instance
     */
    public boolean hasFilePartMetadataBuilder() {
      return filePartMetadataBuilder != null;
    }

    /**
      * Clears the value of the 'filePartMetadata' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder clearFilePartMetadata() {
      filePartMetadata = null;
      filePartMetadataBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'storePartMetadata' field.
      * @return The value.
      */
    public com.xperi.schema.metadata.Store getStorePartMetadata() {
      return storePartMetadata;
    }


    /**
      * Sets the value of the 'storePartMetadata' field.
      * @param value The value of 'storePartMetadata'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder setStorePartMetadata(com.xperi.schema.metadata.Store value) {
      validate(fields()[8], value);
      this.storePartMetadataBuilder = null;
      this.storePartMetadata = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'storePartMetadata' field has been set.
      * @return True if the 'storePartMetadata' field has been set, false otherwise.
      */
    public boolean hasStorePartMetadata() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'storePartMetadata' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.xperi.schema.metadata.Store.Builder getStorePartMetadataBuilder() {
      if (storePartMetadataBuilder == null) {
        if (hasStorePartMetadata()) {
          setStorePartMetadataBuilder(com.xperi.schema.metadata.Store.newBuilder(storePartMetadata));
        } else {
          setStorePartMetadataBuilder(com.xperi.schema.metadata.Store.newBuilder());
        }
      }
      return storePartMetadataBuilder;
    }

    /**
     * Sets the Builder instance for the 'storePartMetadata' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.xperi.schema.metadata.AssetMetadata.Builder setStorePartMetadataBuilder(com.xperi.schema.metadata.Store.Builder value) {
      clearStorePartMetadata();
      storePartMetadataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'storePartMetadata' field has an active Builder instance
     * @return True if the 'storePartMetadata' field has an active Builder instance
     */
    public boolean hasStorePartMetadataBuilder() {
      return storePartMetadataBuilder != null;
    }

    /**
      * Clears the value of the 'storePartMetadata' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder clearStorePartMetadata() {
      storePartMetadata = null;
      storePartMetadataBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'userRoles' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getUserRoles() {
      return userRoles;
    }


    /**
      * Sets the value of the 'userRoles' field.
      * @param value The value of 'userRoles'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder setUserRoles(java.util.List<java.lang.String> value) {
      validate(fields()[9], value);
      this.userRoles = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'userRoles' field has been set.
      * @return True if the 'userRoles' field has been set, false otherwise.
      */
    public boolean hasUserRoles() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'userRoles' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.AssetMetadata.Builder clearUserRoles() {
      userRoles = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AssetMetadata build() {
      try {
        AssetMetadata record = new AssetMetadata();
        record.asset_uuid = fieldSetFlags()[0] ? this.asset_uuid : (java.lang.String) defaultValue(fields()[0]);
        record.subJobId = fieldSetFlags()[1] ? this.subJobId : (java.lang.String) defaultValue(fields()[1]);
        record.operation = fieldSetFlags()[2] ? this.operation : (com.xperi.schema.metadata.Operations) defaultValue(fields()[2]);
        record.meta_file_name = fieldSetFlags()[3] ? this.meta_file_name : (java.lang.String) defaultValue(fields()[3]);
        record.parameters = fieldSetFlags()[4] ? this.parameters : (java.lang.String) defaultValue(fields()[4]);
        record.uiPartMetadata = fieldSetFlags()[5] ? this.uiPartMetadata : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[5]);
        record.contentAssetMetadata = fieldSetFlags()[6] ? this.contentAssetMetadata : (java.lang.String) defaultValue(fields()[6]);
        if (filePartMetadataBuilder != null) {
          try {
            record.filePartMetadata = this.filePartMetadataBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("filePartMetadata"));
            throw e;
          }
        } else {
          record.filePartMetadata = fieldSetFlags()[7] ? this.filePartMetadata : (com.xperi.schema.metadata.File) defaultValue(fields()[7]);
        }
        if (storePartMetadataBuilder != null) {
          try {
            record.storePartMetadata = this.storePartMetadataBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("storePartMetadata"));
            throw e;
          }
        } else {
          record.storePartMetadata = fieldSetFlags()[8] ? this.storePartMetadata : (com.xperi.schema.metadata.Store) defaultValue(fields()[8]);
        }
        record.userRoles = fieldSetFlags()[9] ? this.userRoles : (java.util.List<java.lang.String>) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AssetMetadata>
    WRITER$ = (org.apache.avro.io.DatumWriter<AssetMetadata>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AssetMetadata>
    READER$ = (org.apache.avro.io.DatumReader<AssetMetadata>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.asset_uuid);

    out.writeString(this.subJobId);

    out.writeEnum(this.operation.ordinal());

    out.writeString(this.meta_file_name);

    out.writeString(this.parameters);

    long size0 = this.uiPartMetadata.size();
    out.writeMapStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.Map.Entry<java.lang.String, java.lang.String> e0: this.uiPartMetadata.entrySet()) {
      actualSize0++;
      out.startItem();
      out.writeString(e0.getKey());
      java.lang.String v0 = e0.getValue();
      out.writeString(v0);
    }
    out.writeMapEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeString(this.contentAssetMetadata);

    this.filePartMetadata.customEncode(out);

    this.storePartMetadata.customEncode(out);

    long size1 = this.userRoles.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.String e1: this.userRoles) {
      actualSize1++;
      out.startItem();
      out.writeString(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.asset_uuid = in.readString();

      this.subJobId = in.readString();

      this.operation = com.xperi.schema.metadata.Operations.values()[in.readEnum()];

      this.meta_file_name = in.readString();

      this.parameters = in.readString();

      long size0 = in.readMapStart();
      java.util.Map<java.lang.String,java.lang.String> m0 = this.uiPartMetadata; // Need fresh name due to limitation of macro system
      if (m0 == null) {
        m0 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size0);
        this.uiPartMetadata = m0;
      } else m0.clear();
      for ( ; 0 < size0; size0 = in.mapNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String k0 = null;
          k0 = in.readString();
          java.lang.String v0 = null;
          v0 = in.readString();
          m0.put(k0, v0);
        }
      }

      this.contentAssetMetadata = in.readString();

      if (this.filePartMetadata == null) {
        this.filePartMetadata = new com.xperi.schema.metadata.File();
      }
      this.filePartMetadata.customDecode(in);

      if (this.storePartMetadata == null) {
        this.storePartMetadata = new com.xperi.schema.metadata.Store();
      }
      this.storePartMetadata.customDecode(in);

      long size1 = in.readArrayStart();
      java.util.List<java.lang.String> a1 = this.userRoles;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.String>((int)size1, SCHEMA$.getField("userRoles").schema());
        this.userRoles = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.String> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.String e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readString();
          a1.add(e1);
        }
      }

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.asset_uuid = in.readString();
          break;

        case 1:
          this.subJobId = in.readString();
          break;

        case 2:
          this.operation = com.xperi.schema.metadata.Operations.values()[in.readEnum()];
          break;

        case 3:
          this.meta_file_name = in.readString();
          break;

        case 4:
          this.parameters = in.readString();
          break;

        case 5:
          long size0 = in.readMapStart();
          java.util.Map<java.lang.String,java.lang.String> m0 = this.uiPartMetadata; // Need fresh name due to limitation of macro system
          if (m0 == null) {
            m0 = new java.util.HashMap<java.lang.String,java.lang.String>((int)size0);
            this.uiPartMetadata = m0;
          } else m0.clear();
          for ( ; 0 < size0; size0 = in.mapNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String k0 = null;
              k0 = in.readString();
              java.lang.String v0 = null;
              v0 = in.readString();
              m0.put(k0, v0);
            }
          }
          break;

        case 6:
          this.contentAssetMetadata = in.readString();
          break;

        case 7:
          if (this.filePartMetadata == null) {
            this.filePartMetadata = new com.xperi.schema.metadata.File();
          }
          this.filePartMetadata.customDecode(in);
          break;

        case 8:
          if (this.storePartMetadata == null) {
            this.storePartMetadata = new com.xperi.schema.metadata.Store();
          }
          this.storePartMetadata.customDecode(in);
          break;

        case 9:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.String> a1 = this.userRoles;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.String>((int)size1, SCHEMA$.getField("userRoles").schema());
            this.userRoles = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.String> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.String e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readString();
              a1.add(e1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










