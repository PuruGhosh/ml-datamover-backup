/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.xperi.schema.metadata;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class File extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7025608540362307770L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"File\",\"namespace\":\"com.xperi.schema.metadata\",\"fields\":[{\"name\":\"file_name\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"meta_file_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"owner\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"metadata_type\",\"type\":{\"type\":\"enum\",\"name\":\"MetadataType\",\"symbols\":[\"XML\",\"CSV\",\"JSON\",\"TEXT\",\"UNKNOWN\"]},\"default\":\"UNKNOWN\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<File> ENCODER =
      new BinaryMessageEncoder<File>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<File> DECODER =
      new BinaryMessageDecoder<File>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<File> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<File> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<File> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<File>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this File to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a File from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a File instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static File fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.List<java.lang.String> file_name;
  private java.lang.String meta_file_name;
  private java.lang.String owner;
  private com.xperi.schema.metadata.MetadataType metadata_type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public File() {}

  /**
   * All-args constructor.
   * @param file_name The new value for file_name
   * @param meta_file_name The new value for meta_file_name
   * @param owner The new value for owner
   * @param metadata_type The new value for metadata_type
   */
  public File(java.util.List<java.lang.String> file_name, java.lang.String meta_file_name, java.lang.String owner, com.xperi.schema.metadata.MetadataType metadata_type) {
    this.file_name = file_name;
    this.meta_file_name = meta_file_name;
    this.owner = owner;
    this.metadata_type = metadata_type;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return file_name;
    case 1: return meta_file_name;
    case 2: return owner;
    case 3: return metadata_type;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: file_name = (java.util.List<java.lang.String>)value$; break;
    case 1: meta_file_name = value$ != null ? value$.toString() : null; break;
    case 2: owner = value$ != null ? value$.toString() : null; break;
    case 3: metadata_type = (com.xperi.schema.metadata.MetadataType)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'file_name' field.
   * @return The value of the 'file_name' field.
   */
  public java.util.List<java.lang.String> getFileName() {
    return file_name;
  }


  /**
   * Sets the value of the 'file_name' field.
   * @param value the value to set.
   */
  public void setFileName(java.util.List<java.lang.String> value) {
    this.file_name = value;
  }

  /**
   * Gets the value of the 'meta_file_name' field.
   * @return The value of the 'meta_file_name' field.
   */
  public java.lang.String getMetaFileName() {
    return meta_file_name;
  }


  /**
   * Sets the value of the 'meta_file_name' field.
   * @param value the value to set.
   */
  public void setMetaFileName(java.lang.String value) {
    this.meta_file_name = value;
  }

  /**
   * Gets the value of the 'owner' field.
   * @return The value of the 'owner' field.
   */
  public java.lang.String getOwner() {
    return owner;
  }


  /**
   * Sets the value of the 'owner' field.
   * @param value the value to set.
   */
  public void setOwner(java.lang.String value) {
    this.owner = value;
  }

  /**
   * Gets the value of the 'metadata_type' field.
   * @return The value of the 'metadata_type' field.
   */
  public com.xperi.schema.metadata.MetadataType getMetadataType() {
    return metadata_type;
  }


  /**
   * Sets the value of the 'metadata_type' field.
   * @param value the value to set.
   */
  public void setMetadataType(com.xperi.schema.metadata.MetadataType value) {
    this.metadata_type = value;
  }

  /**
   * Creates a new File RecordBuilder.
   * @return A new File RecordBuilder
   */
  public static com.xperi.schema.metadata.File.Builder newBuilder() {
    return new com.xperi.schema.metadata.File.Builder();
  }

  /**
   * Creates a new File RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new File RecordBuilder
   */
  public static com.xperi.schema.metadata.File.Builder newBuilder(com.xperi.schema.metadata.File.Builder other) {
    if (other == null) {
      return new com.xperi.schema.metadata.File.Builder();
    } else {
      return new com.xperi.schema.metadata.File.Builder(other);
    }
  }

  /**
   * Creates a new File RecordBuilder by copying an existing File instance.
   * @param other The existing instance to copy.
   * @return A new File RecordBuilder
   */
  public static com.xperi.schema.metadata.File.Builder newBuilder(com.xperi.schema.metadata.File other) {
    if (other == null) {
      return new com.xperi.schema.metadata.File.Builder();
    } else {
      return new com.xperi.schema.metadata.File.Builder(other);
    }
  }

  /**
   * RecordBuilder for File instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<File>
    implements org.apache.avro.data.RecordBuilder<File> {

    private java.util.List<java.lang.String> file_name;
    private java.lang.String meta_file_name;
    private java.lang.String owner;
    private com.xperi.schema.metadata.MetadataType metadata_type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.xperi.schema.metadata.File.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.file_name)) {
        this.file_name = data().deepCopy(fields()[0].schema(), other.file_name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.meta_file_name)) {
        this.meta_file_name = data().deepCopy(fields()[1].schema(), other.meta_file_name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.owner)) {
        this.owner = data().deepCopy(fields()[2].schema(), other.owner);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.metadata_type)) {
        this.metadata_type = data().deepCopy(fields()[3].schema(), other.metadata_type);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing File instance
     * @param other The existing instance to copy.
     */
    private Builder(com.xperi.schema.metadata.File other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.file_name)) {
        this.file_name = data().deepCopy(fields()[0].schema(), other.file_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.meta_file_name)) {
        this.meta_file_name = data().deepCopy(fields()[1].schema(), other.meta_file_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.owner)) {
        this.owner = data().deepCopy(fields()[2].schema(), other.owner);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.metadata_type)) {
        this.metadata_type = data().deepCopy(fields()[3].schema(), other.metadata_type);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'file_name' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getFileName() {
      return file_name;
    }


    /**
      * Sets the value of the 'file_name' field.
      * @param value The value of 'file_name'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.File.Builder setFileName(java.util.List<java.lang.String> value) {
      validate(fields()[0], value);
      this.file_name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'file_name' field has been set.
      * @return True if the 'file_name' field has been set, false otherwise.
      */
    public boolean hasFileName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'file_name' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.File.Builder clearFileName() {
      file_name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'meta_file_name' field.
      * @return The value.
      */
    public java.lang.String getMetaFileName() {
      return meta_file_name;
    }


    /**
      * Sets the value of the 'meta_file_name' field.
      * @param value The value of 'meta_file_name'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.File.Builder setMetaFileName(java.lang.String value) {
      validate(fields()[1], value);
      this.meta_file_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'meta_file_name' field has been set.
      * @return True if the 'meta_file_name' field has been set, false otherwise.
      */
    public boolean hasMetaFileName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'meta_file_name' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.File.Builder clearMetaFileName() {
      meta_file_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'owner' field.
      * @return The value.
      */
    public java.lang.String getOwner() {
      return owner;
    }


    /**
      * Sets the value of the 'owner' field.
      * @param value The value of 'owner'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.File.Builder setOwner(java.lang.String value) {
      validate(fields()[2], value);
      this.owner = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'owner' field has been set.
      * @return True if the 'owner' field has been set, false otherwise.
      */
    public boolean hasOwner() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'owner' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.File.Builder clearOwner() {
      owner = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'metadata_type' field.
      * @return The value.
      */
    public com.xperi.schema.metadata.MetadataType getMetadataType() {
      return metadata_type;
    }


    /**
      * Sets the value of the 'metadata_type' field.
      * @param value The value of 'metadata_type'.
      * @return This builder.
      */
    public com.xperi.schema.metadata.File.Builder setMetadataType(com.xperi.schema.metadata.MetadataType value) {
      validate(fields()[3], value);
      this.metadata_type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'metadata_type' field has been set.
      * @return True if the 'metadata_type' field has been set, false otherwise.
      */
    public boolean hasMetadataType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'metadata_type' field.
      * @return This builder.
      */
    public com.xperi.schema.metadata.File.Builder clearMetadataType() {
      metadata_type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public File build() {
      try {
        File record = new File();
        record.file_name = fieldSetFlags()[0] ? this.file_name : (java.util.List<java.lang.String>) defaultValue(fields()[0]);
        record.meta_file_name = fieldSetFlags()[1] ? this.meta_file_name : (java.lang.String) defaultValue(fields()[1]);
        record.owner = fieldSetFlags()[2] ? this.owner : (java.lang.String) defaultValue(fields()[2]);
        record.metadata_type = fieldSetFlags()[3] ? this.metadata_type : (com.xperi.schema.metadata.MetadataType) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<File>
    WRITER$ = (org.apache.avro.io.DatumWriter<File>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<File>
    READER$ = (org.apache.avro.io.DatumReader<File>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.file_name.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.String e0: this.file_name) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeString(this.meta_file_name);

    out.writeString(this.owner);

    out.writeEnum(this.metadata_type.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<java.lang.String> a0 = this.file_name;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("file_name").schema());
        this.file_name = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString();
          a0.add(e0);
        }
      }

      this.meta_file_name = in.readString();

      this.owner = in.readString();

      this.metadata_type = com.xperi.schema.metadata.MetadataType.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.String> a0 = this.file_name;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("file_name").schema());
            this.file_name = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString();
              a0.add(e0);
            }
          }
          break;

        case 1:
          this.meta_file_name = in.readString();
          break;

        case 2:
          this.owner = in.readString();
          break;

        case 3:
          this.metadata_type = com.xperi.schema.metadata.MetadataType.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










